// Code generated by "stringer -type=Opcode"; DO NOT EDIT.

package isa

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OpcodeMask-63]
	_ = x[Add-0]
	_ = x[Arg-1]
	_ = x[ArgLen-2]
	_ = x[Bind-3]
	_ = x[BindRef-4]
	_ = x[Call-5]
	_ = x[Call0-6]
	_ = x[Call1-7]
	_ = x[CallWith-8]
	_ = x[Car-9]
	_ = x[Cdr-10]
	_ = x[Closure-11]
	_ = x[CondJump-12]
	_ = x[Cons-13]
	_ = x[Const-14]
	_ = x[Declare-15]
	_ = x[Deref-16]
	_ = x[Div-17]
	_ = x[Dup-18]
	_ = x[Empty-19]
	_ = x[Eq-20]
	_ = x[False-21]
	_ = x[Jump-22]
	_ = x[Load-23]
	_ = x[Mod-24]
	_ = x[Mul-25]
	_ = x[Neg-26]
	_ = x[NegInt-27]
	_ = x[NewRef-28]
	_ = x[NoOp-29]
	_ = x[Not-30]
	_ = x[Null-31]
	_ = x[NumEq-32]
	_ = x[NumGt-33]
	_ = x[NumGte-34]
	_ = x[NumLt-35]
	_ = x[NumLte-36]
	_ = x[Panic-37]
	_ = x[Pop-38]
	_ = x[PosInt-39]
	_ = x[Private-40]
	_ = x[Resolve-41]
	_ = x[RestArg-42]
	_ = x[RetFalse-43]
	_ = x[RetNull-44]
	_ = x[RetTrue-45]
	_ = x[Return-46]
	_ = x[Store-47]
	_ = x[Sub-48]
	_ = x[TailCall-49]
	_ = x[True-50]
	_ = x[Zero-51]
}

const (
	_Opcode_name_0 = "AddArgArgLenBindBindRefCallCall0Call1CallWithCarCdrClosureCondJumpConsConstDeclareDerefDivDupEmptyEqFalseJumpLoadModMulNegNegIntNewRefNoOpNotNullNumEqNumGtNumGteNumLtNumLtePanicPopPosIntPrivateResolveRestArgRetFalseRetNullRetTrueReturnStoreSubTailCallTrueZero"
	_Opcode_name_1 = "OpcodeMask"
)

var (
	_Opcode_index_0 = [...]uint16{0, 3, 6, 12, 16, 23, 27, 32, 37, 45, 48, 51, 58, 66, 70, 75, 82, 87, 90, 93, 98, 100, 105, 109, 113, 116, 119, 122, 128, 134, 138, 141, 145, 150, 155, 161, 166, 172, 177, 180, 186, 193, 200, 207, 215, 222, 229, 235, 240, 243, 251, 255, 259}
)

func (i Opcode) String() string {
	switch {
	case i <= 51:
		return _Opcode_name_0[_Opcode_index_0[i]:_Opcode_index_0[i+1]]
	case i == 63:
		return _Opcode_name_1
	default:
		return "Opcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
