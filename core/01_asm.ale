;;;; ale core: assembler bootstrapping

(asm*
    .eval (asm* !make-special (name)
        .const name
        dup
        declare)
    .const declare*
    bind

    .eval (asm* !make-special (name)
        .const name
        dup
        private)
    .const private*
    bind

    .eval (asm* !make-special (name value)
        .eval value
        dup
        .const name
        bind)
    .const define*
    bind
    ; block evaluator will pop this
    null)

(define* cons
  (lambda (car cdr)
    (asm*
        .resolve cdr
        .resolve car
        cons)))

(define* car
  (lambda (cons)
    (asm*
        .resolve cons
        car)))

(define* cdr
  (lambda (cons)
    (asm*
        .resolve cons
        cdr)))

(define* is-empty
  (lambda (seq)
    (asm*
        .resolve seq
        empty)))

(define* if
  (asm* !make-special
    [(predicate consequent alternative)
          .eval predicate
          cond-jump :consequent
          .eval alternative
          jump :end
      :consequent
          .eval consequent
      :end]
    [(predicate consequent)
          .eval predicate
          cond-jump :consequent
          null
          jump :end
      :consequent
          .eval consequent
      :end]))

(define* quote
  (asm* !make-special (form)
      .const form))

(define* begin
  (asm* !make-special body
      null
      .for-each body (asm* !make-special (val)
          pop
          .eval val)))
