;;;; ale core: some conveniences

(define nil '())
(define true #t)
(define false #f)

(define first car)
(define rest cdr)

(define (eq f . r)
  (predicate-inst f r eq))

(define (!eq f . r)
  (asm* .eval (predicate-inst f r eq) not))

(define (not value)
  (if value false true))

(define-macro (!and . clauses)
  `(not (and ,@clauses)))

(define-macro (!or . clauses)
  `(not (or ,@clauses)))

(define (no-op . _))

(define (identity value) value)

(define (constantly value)
  (lambda _ value))

(define-macro (: target method . args)
  `((get ,target ,method) ,@args))
