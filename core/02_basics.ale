;;;; ale core: basics

;; type-based predicates
(define* is-any     (is-a* :any))
(define* is-apply   (is-a* :function))
(define* is-boolean (is-a* :boolean))
(define* is-cons    (is-a* :cons))
(define* is-keyword (is-a* :keyword))
(define* is-macro   (is-a* :macro))
(define* is-null    (is-a* :null))
(define* is-number  (is-a* :number))
(define* is-object  (is-a* :object))
(define* is-special (is-a* :special))
(define* is-string  (is-a* :string))
(define* is-symbol  (is-a* :symbol))
(define* is-vector  (is-a* :vector))

;; derived predicates
(define* is-atom       (is-a* :atom))
(define* is-appendable (is-a* :appender))
(define* is-counted    (is-a* :counted))
(define* is-indexed    (is-a* :indexed))
(define* is-list       (is-a* :list))
(define* is-local      (is-a* :local))
(define* is-mapped     (is-a* :mapped))
(define* is-nan        (is-a* :nan))
(define* is-pair       (is-a* :pair))
(define* is-promise    (is-a* :promise))
(define* is-qualified  (is-a* :qualified))
(define* is-resolved   (is-a* :resolved))
(define* is-reversible (is-a* :reverser))
(define* is-seq        (is-a* :sequence))

(define* car
  (lambda (cons)
    (asm*
        .resolve cons
        car)))

(define* cdr
  (lambda (cons)
    (asm*
        .resolve cons
        cdr)))

(define* is-empty
  (lambda (seq)
    (asm*
        .resolve seq
        empty)))

;; syntax-quoting requires it
(define* concat!
  (lambda colls
    (let-rec
      [concat-inner
       (lambda (colls head)
         (if (is-empty colls)
             (apply list head)
             (let ([f (car colls)]
                   [r (cdr colls)])
               (if (is-empty f)
                   (concat-inner r head)
                   (concat-inner (cons (cdr f) r)
                                 (append head (car f)))))))]
      (concat-inner colls []))))

(define* quote
  (asm* !make-special (form)
      .const form))

(define* label
  (macro*
    (lambda (name form)
      `(let-rec [,name ,form] ,name))))

;; case and some macros require it
(define* map!
  (label map!
    (lambda (func coll)
      (if (is-empty coll)
        '()
        (cons (func (car coll))
              (map! func (cdr coll)))))))

(define* and
  (macro*
    (lambda
      [() #t]
      [(clause) clause]
      [clauses
         `(let [and# ,(car clauses)]
            (if and#
                (and ,@(cdr clauses))
                and#))])))

(define* or
  (macro*
    (lambda
      [() #f]
      [(clause) clause]
      [clauses
         `(let [or# ,(car clauses)]
            (if or#
                or#
                (or ,@(cdr clauses))))])))

(define* begin
  (asm* !make-special body
      null
      .for-each body (asm* !make-special (val)
          pop
          .eval val)))

(define* raise
  (lambda (err)
    (asm*
        .resolve err
        panic
        null)))
