;;;; ale core: basics

(define* quote
  (asm*
      !make-encoder (form)
      .const form))

(private* dec*)
(define* dec*
  (asm*
      !make-encoder (value)
      .eval value
      .const 1
      sub))

(define* apply
  (lambda
    [(fn args)
       (asm*
           .resolve args
           .resolve fn
           call-with)]
    [(fn f . r)
       (let-rec
         [prepend-args
          (lambda (args result idx)
            (if (asm* .resolve idx zero num-gte)
                (prepend-args args (cons (args idx) result) (dec* idx))
                result))]
         (let [idx (dec* (length r))]
           (let [args (prepend-args r (r idx) (dec* idx))]
             (asm*
                 .eval (cons f args)
                 .resolve fn
                 call-with))))]))

;; syntax-quoting requires it
(define* concat!
  (lambda colls
    (let-rec
      [concat-inner
       (lambda (colls head)
         (if (is-empty colls)
             (apply list head)
             (let ([f (car colls)]
                   [r (cdr colls)])
               (if (is-empty f)
                   (concat-inner r head)
                   (concat-inner (cons (cdr f) r)
                                 (append head (car f)))))))]
      (concat-inner colls []))))

(define* label
  (macro*
    (lambda (name form)
      `(let-rec [,name ,form] ,name))))

;; case and some macros require it
(define* map!
  (label map!
    (lambda (func coll)
      (if (is-empty coll)
        '()
        (cons (func (car coll))
              (map! func (cdr coll)))))))

(define* and
  (macro*
    (lambda
      [() #t]
      [(clause) clause]
      [clauses
         `(let [and# ,(clauses 0)]
            (if and#
                (and ,@(cdr clauses))
                and#))])))

(define* or
  (macro*
    (lambda
      [() '()]
      [(clause) clause]
      [clauses
         `(let [or# ,(clauses 0)]
            (if or#
                or#
                (or ,@(cdr clauses))))])))

(define* raise
  (lambda (err)
    (asm*
        .resolve err
        panic
        nil)))
