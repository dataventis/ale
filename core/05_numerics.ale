;;;; ale core: numerics

(define :private :macro (reduce-inst init inst)
  `(lambda args
     ,(apply list (concat!
         '(ale/asm*
              .local accum :val
              .const) (list init) '(
              store accum
              .local rest :val
              .resolve args
              store rest
          :loop
              load rest
              empty
              cond-jump :end
              load accum
              load rest
              car)
              (list inst) '(
              store accum
              load rest
              cdr
              store rest
              jump :loop
          :end
              load accum)))))

(define + (reduce-inst 0 add))
(define * (reduce-inst 1 mul))

(define (is-zero value) (= value 0))
(define (is-even value) (= (mod value 2) 0))
(define (is-odd value) (= (mod value 2) 1))

(define (inc value) (+ value 1))
(define (dec value) (- value 1))

(define *pos-inf* (/ 1.0 0.0))
(define *neg-inf* (/ -1.0 0.0))
